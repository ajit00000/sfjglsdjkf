import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Download, FileText, Image, Loader } from 'lucide-react';
import { SpeedTestResult } from '../types/speedTest';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface ReportGeneratorProps {
  result: SpeedTestResult;
}

const ReportGenerator: React.FC<ReportGeneratorProps> = ({ result }) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDFReport = async () => {
    setIsGenerating(true);
    
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();

      // Header
      pdf.setFillColor(59, 130, 246);
      pdf.rect(0, 0, pageWidth, 40, 'F');
      
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(24);
      pdf.text('SpeedTest Pro Report', 20, 25);
      
      pdf.setFontSize(12);
      pdf.text(new Date(result.timestamp).toLocaleString(), 20, 35);

      // Reset text color
      pdf.setTextColor(0, 0, 0);

      // Results section
      pdf.setFontSize(18);
      pdf.text('Test Results', 20, 60);

      pdf.setFontSize(14);
      const results = [
        `Download Speed: ${result.downloadSpeed.toFixed(1)} Mbps`,
        `Upload Speed: ${result.uploadSpeed.toFixed(1)} Mbps`,
        `Ping: ${result.ping.toFixed(0)} ms`,
        `Jitter: ${result.jitter.toFixed(1)} ms`,
        `Server Location: ${result.serverLocation}`,
        `Test Duration: ${result.testDuration.toFixed(1)} seconds`
      ];

      results.forEach((text, index) => {
        pdf.text(text, 20, 80 + (index * 10));
      });

      // Performance analysis
      pdf.setFontSize(18);
      pdf.text('Performance Analysis', 20, 160);

      pdf.setFontSize(12);
      const analysis = [
        `Your download speed of ${result.downloadSpeed.toFixed(1)} Mbps is ${result.downloadSpeed > 25 ? 'excellent' : result.downloadSpeed > 10 ? 'good' : 'below average'} for most online activities.`,
        `Upload speed of ${result.uploadSpeed.toFixed(1)} Mbps is ${result.uploadSpeed > 10 ? 'suitable' : 'limited'} for video conferencing and file sharing.`,
        `Ping of ${result.ping.toFixed(0)}ms indicates ${result.ping < 20 ? 'excellent' : result.ping < 50 ? 'good' : 'poor'} responsiveness for gaming and real-time applications.`
      ];

      analysis.forEach((text, index) => {
        const lines = pdf.splitTextToSize(text, pageWidth - 40);
        pdf.text(lines, 20, 180 + (index * 20));
      });

      // Footer
      pdf.setFillColor(243, 244, 246);
      pdf.rect(0, pageHeight - 30, pageWidth, 30, 'F');
      
      pdf.setTextColor(107, 114, 128);
      pdf.setFontSize(10);
      pdf.text('Generated by SpeedTest Pro - Privacy-focused speed testing', 20, pageHeight - 15);
      pdf.text('No personal data collected or stored', 20, pageHeight - 5);

      pdf.save(`speedtest-report-${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateHTMLReport = () => {
    const htmlContent = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>SpeedTest Pro Report</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
          .container { max-width: 800px; margin: 0 auto; background: white; border-radius: 16px; overflow: hidden; box-shadow: 0 20px 40px rgba(0,0,0,0.1); }
          .header { background: linear-gradient(135deg, #3b82f6, #8b5cf6); color: white; padding: 40px; text-align: center; }
          .header h1 { margin: 0; font-size: 2.5rem; font-weight: bold; }
          .header p { margin: 10px 0 0; opacity: 0.9; }
          .content { padding: 40px; }
          .results-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0; }
          .result-card { background: linear-gradient(135deg, #f8fafc, #e2e8f0); padding: 24px; border-radius: 12px; text-align: center; border: 1px solid #e2e8f0; }
          .result-value { font-size: 2rem; font-weight: bold; color: #1e293b; margin-bottom: 8px; }
          .result-label { color: #64748b; font-weight: 500; }
          .analysis { background: #f8fafc; padding: 24px; border-radius: 12px; margin: 30px 0; border-left: 4px solid #3b82f6; }
          .footer { background: #f1f5f9; padding: 20px; text-align: center; color: #64748b; font-size: 0.9rem; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>SpeedTest Pro Report</h1>
            <p>Generated on ${new Date(result.timestamp).toLocaleString()}</p>
          </div>
          <div class="content">
            <h2>Test Results</h2>
            <div class="results-grid">
              <div class="result-card">
                <div class="result-value">${result.downloadSpeed.toFixed(1)}</div>
                <div class="result-label">Mbps Download</div>
              </div>
              <div class="result-card">
                <div class="result-value">${result.uploadSpeed.toFixed(1)}</div>
                <div class="result-label">Mbps Upload</div>
              </div>
              <div class="result-card">
                <div class="result-value">${result.ping.toFixed(0)}</div>
                <div class="result-label">ms Ping</div>
              </div>
              <div class="result-card">
                <div class="result-value">${result.jitter.toFixed(1)}</div>
                <div class="result-label">ms Jitter</div>
              </div>
            </div>
            <div class="analysis">
              <h3>Performance Analysis</h3>
              <p>Your internet connection shows ${result.downloadSpeed > 25 ? 'excellent' : result.downloadSpeed > 10 ? 'good' : 'limited'} download performance at ${result.downloadSpeed.toFixed(1)} Mbps, which is ${result.downloadSpeed > 25 ? 'ideal for 4K streaming and large downloads' : result.downloadSpeed > 10 ? 'suitable for HD streaming and general browsing' : 'adequate for basic web browsing'}.</p>
              <p>Upload speed of ${result.uploadSpeed.toFixed(1)} Mbps is ${result.uploadSpeed > 10 ? 'excellent for video conferencing and file sharing' : 'suitable for basic uploads and video calls'}.</p>
              <p>Network latency of ${result.ping.toFixed(0)}ms indicates ${result.ping < 20 ? 'excellent responsiveness for gaming and real-time applications' : result.ping < 50 ? 'good performance for most online activities' : 'higher latency that may affect real-time applications'}.</p>
            </div>
          </div>
          <div class="footer">
            <p>Generated by SpeedTest Pro - Privacy-focused internet speed testing</p>
            <p>No personal data collected or stored during this test</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `speedtest-report-${new Date().toISOString().split('T')[0]}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-xl p-6 shadow-lg border border-gray-100"
    >
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-green-100 rounded-lg">
          <FileText className="w-5 h-5 text-green-600" />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-800">Download Report</h3>
          <p className="text-sm text-gray-600">Generate detailed performance reports</p>
        </div>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <button
          onClick={generatePDFReport}
          disabled={isGenerating}
          className="flex items-center justify-center gap-3 px-6 py-4 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isGenerating ? (
            <Loader className="w-5 h-5 animate-spin" />
          ) : (
            <Download className="w-5 h-5" />
          )}
          <div className="text-left">
            <div className="font-semibold">PDF Report</div>
            <div className="text-sm opacity-90">Professional format</div>
          </div>
        </button>

        <button
          onClick={generateHTMLReport}
          className="flex items-center justify-center gap-3 px-6 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
        >
          <Image className="w-5 h-5" />
          <div className="text-left">
            <div className="font-semibold">HTML Report</div>
            <div className="text-sm opacity-90">Interactive format</div>
          </div>
        </button>
      </div>

      <div className="mt-4 p-4 bg-gray-50 rounded-lg">
        <p className="text-sm text-gray-600">
          <strong>Privacy Note:</strong> Reports are generated locally in your browser. 
          No data is sent to external servers.
        </p>
      </div>
    </motion.div>
  );
};

export default ReportGenerator;